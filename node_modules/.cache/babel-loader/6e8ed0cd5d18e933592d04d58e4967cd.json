{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/geocas/Documents/Project5CDEReact/src/components/CounterDisplay.tsx\";\nimport React from 'react';\nimport './CounterDisplay.css';\nimport { connect } from 'react-redux'; // CounterDisplay component\n// PURPOSE: Display the current count on the screen\n\nclass CounterDisplay extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"CounterDisplay\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Vote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Current vote count is:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"showTheCounter\",\n        children: this.props.countProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this);\n  }\n\n} // Connect\n// This file permits to match the redux-specific hooks to be able to use them in React\n// Map redux state to component state\n// This function subscribes to all store updates and gets called when \n// anything in the store changes. It return an object containing the store data you\n// want to transmit as props to a component\n// Here an object containing countValue is transmitted\n// TODO: complete the mapStateToProps function and replace 0\n\n\nfunction mapStateToProps(appState) {\n  return {\n    countProps: appState.count\n  };\n} // Map redux actions to component props\n// This function returns an object with 2 functions that the component can call\n// increase... fires a dispatch with increase... as a type\n\n\nfunction mapDispatchToProps(dispatch) {\n  return {// no actions - we're only showing the counter\n  };\n} // The Hight Order Component (HOC)\n// props need to be received by the component\n\n\nlet ConnectedComponent = connect(mapStateToProps, mapDispatchToProps)(CounterDisplay);\nexport default ConnectedComponent;","map":{"version":3,"sources":["/Users/geocas/Documents/Project5CDEReact/src/components/CounterDisplay.tsx"],"names":["React","connect","CounterDisplay","Component","render","props","countProps","mapStateToProps","appState","count","mapDispatchToProps","dispatch","ConnectedComponent"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,sBAAP;AAEA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;AACA;;AAMA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAAgE;AAE5DC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,EAAE,EAAC,gBAAR;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,kBAAiC,KAAKC,KAAL,CAAWC;AAA5C;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH;;AAX2D,C,CAchE;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,eAAT,CAAyBC,QAAzB,EAAoD;AAChD,SAAO;AACHF,IAAAA,UAAU,EAAEE,QAAQ,CAACC;AADlB,GAAP;AAGH,C,CAED;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4BC,QAA5B,EAA2C;AACvC,SAAO,CACH;AADG,GAAP;AAGH,C,CAED;AACA;;;AACA,IAAIC,kBAAkB,GAAGX,OAAO,CAC5BM,eAD4B,EAE5BG,kBAF4B,CAAP,CAGvBR,cAHuB,CAAzB;AAKA,eAAeU,kBAAf","sourcesContent":["import React from 'react';\nimport './CounterDisplay.css';\nimport { CounterAppState } from '../redux-components/ReduxStuff';\nimport { connect } from 'react-redux';\n\n// CounterDisplay component\n// PURPOSE: Display the current count on the screen\n\ninterface IShowCounterProps {\n    countProps: number;\n}\n\nclass CounterDisplay extends React.Component<IShowCounterProps> {\n\n    render() {\n        return (\n            <div id=\"CounterDisplay\" >\n                <strong>Vote</strong>\n                <br></br>\n                <div>Current vote count is:</div>\n                <div className=\"showTheCounter\">{this.props.countProps}</div>\n            </div>\n        )\n    };\n}\n\n// Connect\n\n// This file permits to match the redux-specific hooks to be able to use them in React\n\n// Map redux state to component state\n// This function subscribes to all store updates and gets called when \n// anything in the store changes. It return an object containing the store data you\n// want to transmit as props to a component\n// Here an object containing countValue is transmitted\n// TODO: complete the mapStateToProps function and replace 0\nfunction mapStateToProps(appState: CounterAppState) {\n    return {\n        countProps: appState.count\n    }\n}\n\n// Map redux actions to component props\n// This function returns an object with 2 functions that the component can call\n// increase... fires a dispatch with increase... as a type\nfunction mapDispatchToProps(dispatch: any) {\n    return {\n        // no actions - we're only showing the counter\n    }\n}\n\n// The Hight Order Component (HOC)\n// props need to be received by the component\nlet ConnectedComponent = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CounterDisplay);\n\nexport default ConnectedComponent;"]},"metadata":{},"sourceType":"module"}