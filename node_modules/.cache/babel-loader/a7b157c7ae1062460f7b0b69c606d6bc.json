{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/geocas/Documents/Project5CDEReact/src/components/CounterChanger.tsx\";\nimport React from 'react';\nimport './CounterChanger.css';\nimport { createChangeAction } from '../redux-components/CountChanger';\nimport { connect } from 'react-redux'; // CounterChanger component\n// PURPOSE: Display a set of buttons that allow the user to change the current count\n\nclass CounterChanger extends React.Component {\n  // TODO: Complete this code such that we have the value of the counter in <span> and\n  // add onClicks to decrease and increase the values of the counter\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: () => this.props.createChangeAction(0),\n        children: \" No \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: () => this.props.createChangeAction(1),\n        children: \" Yes \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this);\n  }\n\n} // Connect\n// This file permits to match the redux-specific hooks to be able to use them in React\n// Map redux state to component state\n// This function subscribes to all store updates and gets called when \n// anything in the store changes. It return an object containing the store data you\n// want to transmit as props to a component\n// Here an object containing countValue is transmitted\n// TODO: complete the mapStateToProps function and replace 0\n\n\nfunction mapStateToProps(appState) {\n  return {// nothing to display in this component, so we don't need \n  };\n} // Map redux actions to component props\n// This function returns an object with 2 functions that the component can call\n// increase... fires a dispatch with increase... as a type\n\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    createChangeAction: changeBy => dispatch(createChangeAction(changeBy))\n  };\n} // The Hight Order Component (HOC)\n// props need to be received by the component\n\n\nlet ConnectedComponent = connect(mapStateToProps, mapDispatchToProps)(CounterChanger);\nexport default ConnectedComponent;","map":{"version":3,"sources":["/Users/geocas/Documents/Project5CDEReact/src/components/CounterChanger.tsx"],"names":["React","createChangeAction","connect","CounterChanger","Component","render","props","mapStateToProps","appState","mapDispatchToProps","dispatch","changeBy","ConnectedComponent"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,sBAAP;AACA,SAA0BC,kBAA1B,QAAoD,kCAApD;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;AACA;;AAMA,MAAMC,cAAN,SAA6BH,KAAK,CAACI,SAAnC,CAA8D;AAE1D;AACA;AACAC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AAAQ,QAAA,SAAS,EAAC,SAAlB;AAA4B,QAAA,OAAO,EAAE,MAAM,KAAKC,KAAL,CAAWL,kBAAX,CAA8B,CAA9B,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,SAAS,EAAC,SAAlB;AAA4B,QAAA,OAAO,EAAE,MAAM,KAAKK,KAAL,CAAWL,kBAAX,CAA8B,CAA9B,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAXyD,C,CAc9D;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,eAAT,CAAyBC,QAAzB,EAAoD;AAChD,SAAO,CACH;AADG,GAAP;AAGH,C,CAED;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4BC,QAA5B,EAA2C;AACvC,SAAO;AACHT,IAAAA,kBAAkB,EAAGU,QAAD,IAAsBD,QAAQ,CAACT,kBAAkB,CAACU,QAAD,CAAnB;AAD/C,GAAP;AAGH,C,CAED;AACA;;;AACA,IAAIC,kBAAkB,GAAGV,OAAO,CAC5BK,eAD4B,EAE5BE,kBAF4B,CAAP,CAGvBN,cAHuB,CAAzB;AAMA,eAAeS,kBAAf","sourcesContent":["import React from 'react';\nimport './CounterChanger.css';\nimport { CounterAppState, createChangeAction } from '../redux-components/CountChanger';\nimport { connect } from 'react-redux';\n\n// CounterChanger component\n// PURPOSE: Display a set of buttons that allow the user to change the current count\n\ninterface ICounterChanger {\n    createChangeAction: (changeBy: number) => void;\n}\n\nclass CounterChanger extends React.Component<ICounterChanger> {\n\n    // TODO: Complete this code such that we have the value of the counter in <span> and\n    // add onClicks to decrease and increase the values of the counter\n    render() {\n        return (\n            <div >\n                <button className=\"buttons\" onClick={() => this.props.createChangeAction(0)}> No </button>\n                <button className=\"buttons\" onClick={() => this.props.createChangeAction(1)}> Yes </button>\n            </div>\n        )\n    };\n}\n\n// Connect\n\n// This file permits to match the redux-specific hooks to be able to use them in React\n\n// Map redux state to component state\n// This function subscribes to all store updates and gets called when \n// anything in the store changes. It return an object containing the store data you\n// want to transmit as props to a component\n// Here an object containing countValue is transmitted\n// TODO: complete the mapStateToProps function and replace 0\nfunction mapStateToProps(appState: CounterAppState) {\n    return {\n        // nothing to display in this component, so we don't need \n    }\n}\n\n// Map redux actions to component props\n// This function returns an object with 2 functions that the component can call\n// increase... fires a dispatch with increase... as a type\nfunction mapDispatchToProps(dispatch: any) {\n    return {\n        createChangeAction: (changeBy: number) => dispatch(createChangeAction(changeBy))\n    }\n}\n\n// The Hight Order Component (HOC)\n// props need to be received by the component\nlet ConnectedComponent = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CounterChanger);\n\n\nexport default ConnectedComponent;\n"]},"metadata":{},"sourceType":"module"}